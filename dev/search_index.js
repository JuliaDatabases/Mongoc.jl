var documenterSearchIndex = {"docs":
[{"location":"gridfs/#GridFS","page":"GridFS","title":"GridFS","text":"","category":"section"},{"location":"gridfs/","page":"GridFS","title":"GridFS","text":"GridFS is a MongoDB feature to store large files.","category":"page"},{"location":"gridfs/","page":"GridFS","title":"GridFS","text":"A BSON document can be use to store arbitrary data, but the size limit is 16MB. With GridFS, you can store files that exceed this limit.","category":"page"},{"location":"gridfs/","page":"GridFS","title":"GridFS","text":"Refer to GridFS docs website for more information.","category":"page"},{"location":"gridfs/#Buckets","page":"GridFS","title":"Buckets","text":"","category":"section"},{"location":"gridfs/","page":"GridFS","title":"GridFS","text":"Files in GridFS are organized inside Buckets.","category":"page"},{"location":"gridfs/","page":"GridFS","title":"GridFS","text":"First, create a Bucket associated with a database. Then, add files to that bucket.","category":"page"},{"location":"gridfs/","page":"GridFS","title":"GridFS","text":"db = client[DB_NAME]\nbucket = Mongoc.Bucket(db)","category":"page"},{"location":"gridfs/#Upload-and-Download-a-file","page":"GridFS","title":"Upload and Download a file","text":"","category":"section"},{"location":"gridfs/","page":"GridFS","title":"GridFS","text":"The following example shows how to upload and download a file to/from a Bucket represented by the variable bucket.","category":"page"},{"location":"gridfs/","page":"GridFS","title":"GridFS","text":"local_fp = \"/path/to/a/local/file.txt\"\n@assert isfile(local_fp)\nremote_filename = \"remote_file.txt\"\n\n# will upload `local_fp` to `bucket`.\n# On the remote bucket, the file will be named `remote_file.txt`.\nMongoc.upload(bucket, remote_filename, local_fp)\n\n# downloads `remote_file.txt` to `download_filepath`.\ndownload_filepath = \"/path/to/a/local/download_file.txt\"\nMongoc.download(bucket, remote_filename, download_filepath)","category":"page"},{"location":"gridfs/#Upload-and-Download-using-streams","page":"GridFS","title":"Upload and Download using streams","text":"","category":"section"},{"location":"gridfs/","page":"GridFS","title":"GridFS","text":"Use Mongoc.open_upload_stream and Mongoc.open_download_stream to execute stream based upload and download operations.","category":"page"},{"location":"gridfs/","page":"GridFS","title":"GridFS","text":"remote_filename = \"uploaded_file.txt\"\n\nio = Mongoc.open_upload_stream(bucket, remote_filename)\nmsg = \"hey you out there\"\nwrite(io, msg)\nclose(io)\n\nMongoc.open_download_stream(bucket, remote_filename) do io\n    tmp_str = read(io, String)\n    println( msg == tmp_str )\nend","category":"page"},{"location":"gridfs/#Find-and-Delete-files-in-Bucket","page":"GridFS","title":"Find and Delete files in Bucket","text":"","category":"section"},{"location":"gridfs/","page":"GridFS","title":"GridFS","text":"Use Mongoc.find on a bucket to search for files, and Mongoc.delete to delete.","category":"page"},{"location":"gridfs/","page":"GridFS","title":"GridFS","text":"for doc in Mongoc.find(bucket)\n    println(\"Deleting $(doc[\"filename\"])\")\n    Mongoc.delete(bucket, doc)\nend","category":"page"},{"location":"api/#API-Reference","page":"API Reference","title":"API Reference","text":"","category":"section"},{"location":"api/#BSON","page":"API Reference","title":"BSON","text":"","category":"section"},{"location":"api/","page":"API Reference","title":"API Reference","text":"Mongoc.BSON\nMongoc.BSONObjectId\nMongoc.BSONCode\nMongoc.as_json\nMongoc.as_dict\nMongoc.get_array\nMongoc.read_bson\nMongoc.write_bson\nMongoc.read_next_bson\nMongoc.BSONError\nMongoc.BSONValue\nMongoc.get_as_bson_value\nMongoc.read_bson_from_json","category":"page"},{"location":"api/#Mongoc.BSON","page":"API Reference","title":"Mongoc.BSON","text":"A BSON represents a document in Binary JSON format, defined at http://bsonspec.org/.\n\nIn Julia, you can manipulate a BSON instance just like a Dict.\n\nExample\n\nbson = Mongoc.BSON()\nbson[\"name\"] = \"my name\"\nbson[\"num\"] = 10.0\n\nC API\n\nBSON is a wrapper for C struct bson_t.\n\n\n\n\n\n","category":"type"},{"location":"api/#Mongoc.BSONObjectId","page":"API Reference","title":"Mongoc.BSONObjectId","text":"A BSONObjectId represents a unique identifier for a BSON document.\n\nExample\n\nThe following generates a new BSONObjectId.\n\njulia> Mongoc.BSONObjectId()\n\nC API\n\nBSONObjectId instances addresses are passed to libbson/libmongoc API using Ref(oid), and are owned by the Julia process.\n\nMirrors C struct bson_oid_t:\n\ntypedef struct {\n   uint8_t bytes[12];\n} bson_oid_t;\n\n\n\n\n\n","category":"type"},{"location":"api/#Mongoc.BSONCode","page":"API Reference","title":"Mongoc.BSONCode","text":"BSONCode is a BSON element with JavaScript source code.\n\nExample\n\njulia> bson = Mongoc.BSON(\"source\" => Mongoc.BSONCode(\"function() = 1\"))\nBSON(\"{ \"source\" : { \"$code\" : \"function() = 1\" } }\")\n\n\n\n\n\n","category":"type"},{"location":"api/#Mongoc.as_json","page":"API Reference","title":"Mongoc.as_json","text":"as_json(bson::BSON; canonical::Bool=false) :: String\n\nConverts a bson object to a JSON string.\n\nExample\n\njulia> document = Mongoc.BSON(\"{ \"hey\" : 1 }\")\nBSON(\"{ \"hey\" : 1 }\")\n\njulia> Mongoc.as_json(document)\n\"{ \"hey\" : 1 }\"\n\njulia> Mongoc.as_json(document, canonical=true)\n\"{ \"hey\" : { \"$numberInt\" : \"1\" } }\"\n\nC API\n\nbson_as_canonical_extended_json\nbson_as_relaxed_extended_json\n\n\n\n\n\n","category":"function"},{"location":"api/#Mongoc.as_dict","page":"API Reference","title":"Mongoc.as_dict","text":"as_dict(document::BSON) :: Dict\n\nConverts a BSON document to a Julia Dict.\n\n\n\n\n\n","category":"function"},{"location":"api/#Mongoc.get_array","page":"API Reference","title":"Mongoc.get_array","text":"get_array(doc::BSON, key::AbstractString, ::Type{T})\n\nGet an array from the document with a specified type T. This allows obtaining a type-stable return value. Note that if an array element cannot be converted to the specified type, an error will be thrown.\n\n\n\n\n\n","category":"function"},{"location":"api/#Mongoc.read_bson","page":"API Reference","title":"Mongoc.read_bson","text":"read_bson(io::IO) :: Vector{BSON}\n\nReads all BSON documents from io. This method will continue to read from io until it reaches eof.\n\n\n\n\n\nread_bson(data::Vector{UInt8}) :: Vector{BSON}\n\nParses a vector of bytes to a vector of BSON documents. Useful when reading BSON as binary from a stream.\n\n\n\n\n\nread_bson(filepath::AbstractString) :: Vector{BSON}\n\nReads all BSON documents from a file located at filepath.\n\nThis will open a Mongoc.BSONReader pointing to the file and will parse file contents to BSON documents.\n\n\n\n\n\nread_bson(reader::BSONReader) :: Vector{BSON}\n\nReads all BSON documents from a reader.\n\n\n\n\n\n","category":"function"},{"location":"api/#Mongoc.write_bson","page":"API Reference","title":"Mongoc.write_bson","text":"write_bson(io::IO, bson::BSON;\n    initial_buffer_capacity::Integer=DEFAULT_BSON_WRITER_BUFFER_CAPACITY)\n\nWrites a single BSON document to io in binary format.\n\n\n\n\n\nwrite_bson(io::IO, bson_list::Vector{BSON};\n    initial_buffer_capacity::Integer=DEFAULT_BSON_WRITER_BUFFER_CAPACITY)\n\nWrites a vector of BSON documents to io in binary format.\n\nExample\n\nlist = Vector{Mongoc.BSON}()\n\nlet\n    src = Mongoc.BSON()\n    src[\"id\"] = 1\n    src[\"name\"] = \"1st\"\n    push!(list, src)\nend\n\nlet\n    src = Mongoc.BSON()\n    src[\"id\"] = 2\n    src[\"name\"] = \"2nd\"\n    push!(list, src)\nend\n\nopen(\"documents.bson\", \"w\") do io\n    Mongoc.write_bson(io, list)\nend\n\n\n\n\n\n","category":"function"},{"location":"api/#Mongoc.read_next_bson","page":"API Reference","title":"Mongoc.read_next_bson","text":"read_next_bson(reader::BSONReader) :: Union{Nothing, BSON}\n\nReads the next BSON document available in the stream pointed by reader. Returns nothing if reached the end of the stream.\n\n\n\n\n\n","category":"function"},{"location":"api/#Mongoc.BSONError","page":"API Reference","title":"Mongoc.BSONError","text":"BSONError is the default Exception for BSON/MongoDB function call errors.\n\nC API\n\nMirrors C struct bson_error_t.\n\nBSONError instances addresses are passed to libbson/libmongoc API using Ref(error), and are owned by the Julia process.\n\ntypedef struct {\n   uint32_t domain;\n   uint32_t code;\n   char message[504];\n} bson_error_t;\n\n\n\n\n\n","category":"type"},{"location":"api/#Mongoc.BSONValue","page":"API Reference","title":"Mongoc.BSONValue","text":"Wrapper for bsonvaluet.\n\nSee Mongoc.get_as_bson_value.\n\n\n\n\n\n","category":"type"},{"location":"api/#Mongoc.get_as_bson_value","page":"API Reference","title":"Mongoc.get_as_bson_value","text":"get_as_bson_value(doc, key) :: BSONValue\n\nReturns a value stored in a bson document doc as a BSONValue.\n\nSee also Mongoc.BSONValue.\n\n\n\n\n\n","category":"function"},{"location":"api/#Mongoc.read_bson_from_json","page":"API Reference","title":"Mongoc.read_bson_from_json","text":"read_bson_from_json(filepath::AbstractString) :: Vector{BSON}\n\nReads a JSON file into a list of BSON documents. The file should contain a sequence of valid JSON documents.\n\nExample of a valid JSON file\n\n{ \"num\" : 1, \"str\" : \"two\" }\n{ \"num\" : 2, \"str\" : \"three\" }\n\n\n\n\n\n","category":"function"},{"location":"api/#Client","page":"API Reference","title":"Client","text":"","category":"section"},{"location":"api/","page":"API Reference","title":"API Reference","text":"Mongoc.Client\nMongoc.set_appname!\nMongoc.ping\nMongoc.get_server_mongodb_version\nMongoc.find_databases\nMongoc.get_database_names\nMongoc.has_database","category":"page"},{"location":"api/#Mongoc.Client","page":"API Reference","title":"Mongoc.Client","text":"Client(host, port)\nClient(uri)\nClient()\nClient(pool; [try_pop=false])\n\nCreates a Client, which represents a connection to a MongoDB database.\n\nSee also Mongoc.ClientPool.\n\nExamples:\n\nThese lines are equivalent.\n\nc = Mongoc.Client()\nc = Mongoc.Client(\"localhost\", 27017)\nc = Mongoc.Client(\"mongodb://localhost:27017\")\n\n\n\n\n\n","category":"type"},{"location":"api/#Mongoc.set_appname!","page":"API Reference","title":"Mongoc.set_appname!","text":"set_appname!(client::Client, appname::String)\n\nSets the application name for this client.\n\nThis string, along with other internal driver details, is sent to the server as part of the initial connection handshake.\n\nC API\n\nmongoc_client_set_appname.\n\n\n\n\n\n","category":"function"},{"location":"api/#Mongoc.ping","page":"API Reference","title":"Mongoc.ping","text":"ping(client::Client) :: BSON\n\nPings the server, testing wether it is reachable.\n\nOne thing to keep in mind is that operations on MongoDB are lazy, which means that a client reaches a server only when it needs to transfer documents.\n\nExample\n\njulia> client = Mongoc.Client() # nothing happens here between client and server\nClient(URI(\"mongodb://localhost:27017\"))\n\njulia> Mongoc.ping(client) # connection to server happens here\nBSON(\"{ \"ok\" : 1.0 }\")\n\n\n\n\n\n","category":"function"},{"location":"api/#Mongoc.get_server_mongodb_version","page":"API Reference","title":"Mongoc.get_server_mongodb_version","text":"get_server_mongodb_version(client::Client) :: VersionNumber\n\nQueries the version for the MongoDB server instance.\n\n\n\n\n\n","category":"function"},{"location":"api/#Mongoc.find_databases","page":"API Reference","title":"Mongoc.find_databases","text":"find_databases(client::Client; options::Union{Nothing, BSON}=nothing) :: Cursor\n\nQueries for databases.\n\n\n\n\n\n","category":"function"},{"location":"api/#Mongoc.get_database_names","page":"API Reference","title":"Mongoc.get_database_names","text":"get_database_names(client::Client; options::Union{Nothing, BSON}=nothing) :: Vector{String}\n\nHelper method to get a list of names for all databases.\n\nSee also Mongoc.find_databases.\n\n\n\n\n\n","category":"function"},{"location":"api/#Mongoc.has_database","page":"API Reference","title":"Mongoc.has_database","text":"has_database(client::Client, database_name::String;\n    options::Union{Nothing, BSON}=nothing) :: Bool\n\nHelper method to check if there is a database named database_name.\n\nSee also Mongoc.find_databases.\n\n\n\n\n\n","category":"function"},{"location":"api/#ClientPool","page":"API Reference","title":"ClientPool","text":"","category":"section"},{"location":"api/","page":"API Reference","title":"API Reference","text":"Mongoc.ClientPool\nMongoc.set_max_size","category":"page"},{"location":"api/#Mongoc.ClientPool","page":"API Reference","title":"Mongoc.ClientPool","text":"ClientPool(uri; [max_size])\n\nCreates a pool of connections to a MongoDB instance.\n\nExample\n\nconst REPLICA_SET_URL = \"mongodb://127.0.0.1:27021,127.0.0.1:27022,127.0.0.1:27023/?replicaSet=rs0\"\n\npool = Mongoc.ClientPool(REPLICA_SET_URL, max_size=2)\n\n# create Clients from a pool\nclient1 = Mongoc.Client(pool)\nclient2 = Mongoc.Client(pool)\n\nWhen you reach the maximum number of clients, the next call to Mongoc.Client(pool) will block until a Client is released.\n\nUse try_pop=true option to throw an error instead of blocking the current thread:\n\n# will throw `AssertionError`\nclient3 = Mongoc.Client(pool, try_pop=true)\n\n\n\n\n\n","category":"type"},{"location":"api/#Mongoc.set_max_size","page":"API Reference","title":"Mongoc.set_max_size","text":"set_max_size(pool, max_size)\n\nSet the maximum number of clients on the client pool.\n\nExample\n\nconst REPLICA_SET_URL = \"mongodb://127.0.0.1:27021,127.0.0.1:27022,127.0.0.1:27023/?replicaSet=rs0\"\npool = Mongoc.ClientPool(REPLICA_SET_URL)\n\nMongoc.set_max_size(pool, 4)\n\n\n\n\n\n","category":"function"},{"location":"api/#Database","page":"API Reference","title":"Database","text":"","category":"section"},{"location":"api/","page":"API Reference","title":"API Reference","text":"Mongoc.command_simple\nMongoc.add_user\nMongoc.remove_user\nMongoc.has_user\nMongoc.find_collections\nMongoc.get_collection_names\nMongoc.read_command\nMongoc.write_command","category":"page"},{"location":"api/#Mongoc.command_simple","page":"API Reference","title":"Mongoc.command_simple","text":"command_simple(database::Database, command::BSON) :: BSON\ncommand_simple(collection::Collection, command::BSON) :: BSON\n\nExecutes a command given by a JSON string or a BSON instance.\n\nIt returns the first document from the result cursor.\n\nExample\n\njulia> client = Mongoc.Client() # connects to localhost at port 27017\nClient(URI(\"mongodb://localhost:27017\"))\n\njulia> bson_result = Mongoc.command_simple(client[\"admin\"], \"{ \"ping\" : 1 }\")\nBSON(\"{ \"ok\" : 1.0 }\")\n\nC API\n\nmongoc_database_command_simple\n\n\n\n\n\n","category":"function"},{"location":"api/#Mongoc.add_user","page":"API Reference","title":"Mongoc.add_user","text":"add_user(database::Database, username::String, password::String, roles::Union{Nothing, BSON},\n    custom_data::Union{Nothing, BSON}=nothing)\n\nThis function shall create a new user with access to database.\n\nWarning: Do not call this function without TLS.\n\n\n\n\n\n","category":"function"},{"location":"api/#Mongoc.remove_user","page":"API Reference","title":"Mongoc.remove_user","text":"remove_user(database::Database, username::String)\n\nRemoves a user from database.\n\n\n\n\n\n","category":"function"},{"location":"api/#Mongoc.has_user","page":"API Reference","title":"Mongoc.has_user","text":"has_user(database::Database, user_name::String) :: Bool\n\nChecks if database has a user named user_name.\n\n\n\n\n\n","category":"function"},{"location":"api/#Mongoc.find_collections","page":"API Reference","title":"Mongoc.find_collections","text":"find_collections(database::Database; options::Union{Nothing, BSON}=nothing) :: Cursor\n\nQueries for collections in a database.\n\n\n\n\n\n","category":"function"},{"location":"api/#Mongoc.get_collection_names","page":"API Reference","title":"Mongoc.get_collection_names","text":"get_collection_names(database::Database;\n    options::Union{Nothing, BSON}=nothing) :: Vector{String}\n\nHelper method to get collection names.\n\nSee also Mongoc.find_collections.\n\n\n\n\n\n","category":"function"},{"location":"api/#Mongoc.read_command","page":"API Reference","title":"Mongoc.read_command","text":"read_command(database::Database, command::BSON;\n    options::Union{Nothing, BSON}=nothing) :: BSON\n\nIssue a command with read semantics.\n\nSee http://mongoc.org/libmongoc/current/mongocdatabasereadcommandwith_opts.html.\n\n\n\n\n\n","category":"function"},{"location":"api/#Mongoc.write_command","page":"API Reference","title":"Mongoc.write_command","text":"write_command(database::Database, command::BSON;\n    options::Union{Nothing, BSON}=nothing) :: BSON\n\nIssue a command with write semantics.\n\nSee http://mongoc.org/libmongoc/current/mongocdatabasereadwritecommandwithopts.html.\n\n\n\n\n\n","category":"function"},{"location":"api/#Collection","page":"API Reference","title":"Collection","text":"","category":"section"},{"location":"api/","page":"API Reference","title":"API Reference","text":"Mongoc.find\nMongoc.find_one\nMongoc.count_documents\nMongoc.drop\nMongoc.find_and_modify\nMongoc.FindAndModifyFlags\nMongoc.find_one_and_delete\nMongoc.find_one_and_replace\nMongoc.find_one_and_update\nMongoc.replace_one","category":"page"},{"location":"api/#Mongoc.find","page":"API Reference","title":"Mongoc.find","text":"find(collection::Collection, bson_filter::BSON=BSON();\n    options::Union{Nothing, BSON}=nothing) :: Cursor\n\nExecutes a query on collection and returns an iterable Cursor.\n\nExample\n\nfunction find_contract_codes(collection, criteria::Dict=Dict()) :: Vector{String}\n    result = Vector{String}()\n\n    let\n        bson_filter = Mongoc.BSON(criteria)\n        bson_options = Mongoc.BSON(\"\"\"{ \"projection\" : { \"_id\" : true }, \"sort\" : { \"_id\" : 1 } }\"\"\")\n        for bson_document in Mongoc.find(collection, bson_filter, options=bson_options)\n            push!(result, bson_document[\"_id\"])\n        end\n    end\n\n    return result\nend\n\nCheck the libmongoc documentation for more information.\n\n\n\n\n\nfind(bucket::Bucket, bson_filter::BSON=BSON();\n    options::BSON=BSON()) :: Cursor\n\nLooks for files in GridFS bucket.\n\n\n\n\n\n","category":"function"},{"location":"api/#Mongoc.find_one","page":"API Reference","title":"Mongoc.find_one","text":"find_one(collection::Collection, bson_filter::BSON=BSON();\n    options::Union{Nothing, BSON}=nothing) :: Union{Nothing, BSON}\n\nExecute a query to a collection and returns the first element of the result set.\n\nReturns nothing if the result set is empty.\n\n\n\n\n\n","category":"function"},{"location":"api/#Mongoc.count_documents","page":"API Reference","title":"Mongoc.count_documents","text":"count_documents(collection::Collection, bson_filter::BSON=BSON();\n    options::Union{Nothing, BSON}=nothing) :: Int\n\nReturns the number of documents on a collection, with an optional filter given by bson_filter.\n\nlength(collection) and Mongoc.count_documents(collection) produces the same output.\n\nExample\n\nresult = length(collection, Mongoc.BSON(\"_id\" => oid))\n\n\n\n\n\n","category":"function"},{"location":"api/#Mongoc.drop","page":"API Reference","title":"Mongoc.drop","text":"drop(database::Database, opts::Union{Nothing, BSON}=nothing)\ndrop(collection::Collection, opts::Union{Nothing, BSON}=nothing)\n\nDrops database or collection.\n\nFor information about opts argument, check the libmongoc documentation for database drop or collection drop.\n\n\n\n\n\n","category":"function"},{"location":"api/#Mongoc.find_and_modify","page":"API Reference","title":"Mongoc.find_and_modify","text":"find_and_modify(collection::Collection, query::BSON;\n    update::Union{Nothing, BSON}=nothing,\n    sort::Union{Nothing, BSON}=nothing,\n    fields::Union{Nothing, BSON}=nothing,\n    flags::Union{Nothing, FindAndModifyFlags}=nothing,\n    bypass_document_validation::Bool=false,\n) :: BSON\n\nFind documents and updates them in one go.\n\nSee Mongoc.FindAndModifyFlags for a list of accepted values for flags argument.\n\nC API\n\nmongoccollectionfindandmodify.\n\n\n\n\n\n","category":"function"},{"location":"api/#Mongoc.FindAndModifyFlags","page":"API Reference","title":"Mongoc.FindAndModifyFlags","text":"Adds one or more flags to the FindAndModifyOptsBuilder. These flags can be ORed together, as in flags = Mongoc.FIND_AND_MODIFY_FLAG_UPSERT | Mongoc.FIND_AND_MODIFY_FLAG_RETURN_NEW.\n\nFIND_AND_MODIFY_FLAG_NONE: Default. Doesn’t add anything to the builder.\nFIND_AND_MODIFY_FLAG_REMOVE: Will instruct findandmodify to remove the matching document.\nFIND_AND_MODIFY_FLAG_UPSERT: Update the matching document or, if no document matches, insert the document.\nFIND_AND_MODIFY_FLAG_RETURN_NEW: Return the resulting document.\n\n\n\n\n\n","category":"type"},{"location":"api/#Mongoc.find_one_and_delete","page":"API Reference","title":"Mongoc.find_one_and_delete","text":"find_one_and_delete(collection::Collection, bson_filter::BSON;\n    options::Union{Nothing, BSON}=nothing\n) :: Union{Nothing, BSON}\n\nDelete a document and return it.\n\nSee db.collection.findOneAndDelete  for a list of accepted options.\n\n\n\n\n\n","category":"function"},{"location":"api/#Mongoc.find_one_and_replace","page":"API Reference","title":"Mongoc.find_one_and_replace","text":"find_one_and_replace(collection::Collection, bson_filter::BSON, bson_replacement::BSON;\n    options::Union{Nothing, BSON}=nothing\n) :: Union{Nothing, BSON}\n\nReplace a document and return the original.\n\nSee db.collection.findOneAndReplace  for a list of accepted options.\n\n\n\n\n\n","category":"function"},{"location":"api/#Mongoc.find_one_and_update","page":"API Reference","title":"Mongoc.find_one_and_update","text":"find_one_and_update(collection::Collection, bson_filter::BSON, bson_update::BSON;\n    options::Union{Nothing, BSON}=nothing\n) :: Union{Nothing, BSON}\n\nUpdate a document and return the original.\n\nSee db.collection.findOneAndUpdate  for a list of accepted options.\n\n\n\n\n\n","category":"function"},{"location":"api/#Mongoc.replace_one","page":"API Reference","title":"Mongoc.replace_one","text":"replace_one(\n        collection::Collection,\n        selector::BSON,\n        replacement::BSON;\n        options::Union{Nothing, BSON}=nothing\n    )\n\nReplace the result of querying by selector with replacement.\n\n\n\n\n\n","category":"function"},{"location":"api/#Aggregation","page":"API Reference","title":"Aggregation","text":"","category":"section"},{"location":"api/","page":"API Reference","title":"API Reference","text":"Mongoc.aggregate\nMongoc.QueryFlags","category":"page"},{"location":"api/#Mongoc.aggregate","page":"API Reference","title":"Mongoc.aggregate","text":"aggregate(collection::Collection, bson_pipeline::BSON;\n    flags::QueryFlags=QUERY_FLAG_NONE,\n    options::Union{Nothing, BSON}=nothing) :: Cursor\n\nUse Mongoc.aggregate to execute an aggregation command.\n\nExample\n\nThe following reproduces the example from the MongoDB Tutorial.\n\ndocs = [\n    Mongoc.BSON(\"\"\"{ \"cust_id\" : \"A123\", \"amount\" : 500, \"status\" : \"A\" }\"\"\"),\n    Mongoc.BSON(\"\"\"{ \"cust_id\" : \"A123\", \"amount\" : 250, \"status\" : \"A\" }\"\"\"),\n    Mongoc.BSON(\"\"\"{ \"cust_id\" : \"B212\", \"amount\" : 200, \"status\" : \"A\" }\"\"\"),\n    Mongoc.BSON(\"\"\"{ \"cust_id\" : \"A123\", \"amount\" : 300, \"status\" : \"D\" }\"\"\")\n]\n\ncollection = client[\"my-database\"][\"aggregation-collection\"]\nappend!(collection, docs)\n\n# Sets the pipeline command\nbson_pipeline = Mongoc.BSON(\"\"\"\n    [\n        { \"$match\" : { \"status\" : \"A\" } },\n        { \"$group\" : { \"_id\" : \"$cust_id\", \"total\" : { \"$sum\" : \"$amount\" } } }\n    ]\n\"\"\")\n\nfor doc in Mongoc.aggregate(collection, bson_pipeline)\n  println(doc)\nend\n\nThe result of the script above is:\n\nBSON(\"{ \"_id\" : \"B212\", \"total\" : 200 }\")\nBSON(\"{ \"_id\" : \"A123\", \"total\" : 750 }\")\n\n\n\n\n\n","category":"function"},{"location":"api/#Mongoc.QueryFlags","page":"API Reference","title":"Mongoc.QueryFlags","text":"QueryFlags correspond to the MongoDB wire protocol. They may be bitwise or’d together. They may modify how a query is performed in the MongoDB server.\n\nThese flags are passed as optional argument for the aggregation function Mongoc.aggregate.\n\nThis data type mirrors C struct mongoc_query_flags_t. See libmongoc docs for more information.\n\nConstants\n\nMongoc.QUERY_FLAG_NONE: Specify no query flags.\n\nMongoc.QUERY_FLAG_TAILABLE_CURSOR: Cursor will not be closed when the last data is retrieved. You can resume this cursor later.\n\nMongoc.QUERY_FLAG_SLAVE_OK: Allow query of replica set secondaries.\n\nMongoc.QUERY_FLAG_OPLOG_REPLAY: Used internally by MongoDB.\n\nMongoc.QUERY_FLAG_NO_CURSOR_TIMEOUT: The server normally times out an idle cursor after an inactivity period (10 minutes). This prevents that.\n\nMongoc.QUERY_FLAG_AWAIT_DATA: Use with Mongoc.MONGOC_QUERY_TAILABLE_CURSOR. Block rather than returning no data. After a period, time out.\n\nMongoc.QUERY_FLAG_EXHAUST: Stream the data down full blast in multiple \"reply\" packets. Faster when you are pulling down a lot of data and you know you want to retrieve it all.\n\nMongoc.QUERY_FLAG_PARTIAL: Get partial results from mongos if some shards are down (instead of throwing an error).\n\n\n\n\n\n","category":"type"},{"location":"api/#Session","page":"API Reference","title":"Session","text":"","category":"section"},{"location":"api/","page":"API Reference","title":"API Reference","text":"Mongoc.transaction","category":"page"},{"location":"api/#Mongoc.transaction","page":"API Reference","title":"Mongoc.transaction","text":"transaction(f::Function, client::Client; session_options::SessionOptions=SessionOptions())\n\nUse do-syntax to execute a transaction.\n\nTransaction will be commited automatically. If an error occurs, the transaction is aborted.\n\nThe session parameter should be treated the same way as a Client: from a session you get a database, and a collection that are bound to the session.\n\nMongoc.transaction(client) do session\n    database = session[\"my_database\"]\n    collection = database[\"my_collection\"]\n    new_item = Mongoc.BSON()\n    new_item[\"inserted\"] = true\n    push!(collection, new_item)\nend\n\n\n\n\n\n","category":"function"},{"location":"api/#GridFS","page":"API Reference","title":"GridFS","text":"","category":"section"},{"location":"api/","page":"API Reference","title":"API Reference","text":"Mongoc.MongoStreamFile\nMongoc.upload\nMongoc.download\nMongoc.delete\nMongoc.open_download_stream\nMongoc.open_upload_stream\nMongoc.abort_upload","category":"page"},{"location":"api/#Mongoc.MongoStreamFile","page":"API Reference","title":"Mongoc.MongoStreamFile","text":"MongoStreamFile(filepath;\n    [flags=JL_O_RDONLY], [mode=0],\n    [timeout_msec=DEFAULT_TIMEOUT_MSEC],\n    [chunk_size=DEFAULT_CHUNK_SIZE])\n\nCreates a stream from file located at filepath.\n\nflags is the input to pass to open. Must be one of the constants defined at Base.Filesystem: Base.Filesystem.JL_O_RDONLY, Base.Filesystem.JL_O_CREAT, etc.\n\nmode is an optional mode to pass to open.\n\n\n\n\n\n","category":"type"},{"location":"api/#Mongoc.upload","page":"API Reference","title":"Mongoc.upload","text":"upload(bucket::Bucket, filename::AbstractString, source::AbstractMongoStream;\n    options::Union{Nothing, BSON}=nothing,\n    file_id=BSONObjectId())\n\nUploads data from source to a GridFS file filename.\n\nbson_file_id is a BSON document with a _id field. If _id field is not present, a BSONObjectId will be generated.\n\n\n\n\n\nupload(bucket::Bucket, remote_filename::AbstractString, local_source_filepath::AbstractString;\n    options::Union{Nothing, BSON}=nothing,\n    file_id=BSONObjectId())\n\nHigh-level interface to upload a local file to a GridFS bucket.\n\n\n\n\n\n","category":"function"},{"location":"api/#Mongoc.download","page":"API Reference","title":"Mongoc.download","text":"download(bucket::Bucket, file_id, target::AbstractMongoStream)\n\nDownload a GridFS file identified by file_id to target stream.\n\nfile_id may be either a BSONValue or a BSON document with an _id field.\n\n\n\n\n\ndownload(bucket::Bucket, remote_file, local_filepath::AbstractString;\n    flags::Integer=(Base.Filesystem.JL_O_CREAT | Base.Filesystem.JL_O_RDWR), mode::Integer=0o600\n\nDownloads a GridFS file remote_file to local_filepath.\n\nremote_file can be either a unique filename, or a file_id::BSONValue, or file_info::BSON.\n\n\n\n\n\n","category":"function"},{"location":"api/#Mongoc.delete","page":"API Reference","title":"Mongoc.delete","text":"delete(bucket::Bucket, file_id)\ndelete(bucket::Bucket, file_metadata::BSON)\n\nDeletes a file from a GridFS Bucket.\n\n\n\n\n\n","category":"function"},{"location":"api/#Mongoc.open_download_stream","page":"API Reference","title":"Mongoc.open_download_stream","text":"open_download_stream(f, bucket, filename)\nopen_download_stream(bucket, filename) :: MongoIOStream\n\nOpens a stream for reading a remote file identified by filename.\n\nExample\n\nOpen a stream, do some work, then close it.\n\nio = Mongoc.open_download_stream(bucket, file)\ntry\n    tmp_str = read(io, String)\nfinally\n    close(io)\nend\n\nUse do-syntax to ensure that the io stream will be closed in case something goes wrong.\n\nMongoc.open_download_stream(bucket, remote_filename) do io\n    tmp_str = read(io, String)\nend\n\n\n\n\n\n","category":"function"},{"location":"api/#Mongoc.open_upload_stream","page":"API Reference","title":"Mongoc.open_upload_stream","text":"open_upload_stream(bucket, file_id, filename; [options], [timeout_msec], [chunk_size]) :: MongoIOStream\nopen_upload_stream(bucket, filename; [options], [timeout_msec], [chunk_size]) :: MongoIOStream\nopen_upload_stream(bucket, file_info; [options], [timeout_msec], [chunk_size]) :: MongoIOStream\n\nOpens a stream to upload a file to a GridFS Bucket.\n\nfile_info is a BSON document with the following fields:\n\n_id as an optional identifier.\nfilename as the name of the file in the remote bucket.\n\nIf _id is not provided, a BSONObjectId will be generated.\n\nExample\n\ndata = rand(UInt8, 3_000_000)\nremote_filename = \"uploaded.data\"\nio = Mongoc.open_upload_stream(bucket, remote_filename)\nwrite(io, data)\nclose(io)\n\n\n\n\n\n","category":"function"},{"location":"api/#Mongoc.abort_upload","page":"API Reference","title":"Mongoc.abort_upload","text":"abort_upload(io::MongoIOStream)\n\nAborts the upload of a GridFS upload stream.\n\n\n\n\n\n","category":"function"},{"location":"crud/#CRUD-Operations","page":"CRUD Operations","title":"CRUD Operations","text":"","category":"section"},{"location":"crud/#Insert","page":"CRUD Operations","title":"Insert","text":"","category":"section"},{"location":"crud/#API","page":"CRUD Operations","title":"API","text":"","category":"section"},{"location":"crud/","page":"CRUD Operations","title":"CRUD Operations","text":"Mongoc.insert_one(collection::Collection, document::BSON; options::Union{Nothing, BSON}=nothing)\n\nMongoc.insert_many(collection::Collection, documents::Vector{BSON}; bulk_options::Union{Nothing, BSON}=nothing, insert_options::Union{Nothing, BSON}=nothing)","category":"page"},{"location":"crud/","page":"CRUD Operations","title":"CRUD Operations","text":"Mongoc.insert_one is equivalent to Base.push! for a collection. The same applies to Mongoc.insert_many in relation to Base.append!.","category":"page"},{"location":"crud/#Examples","page":"CRUD Operations","title":"Examples","text":"","category":"section"},{"location":"crud/","page":"CRUD Operations","title":"CRUD Operations","text":"push!(collection, Mongoc.BSON(\"\"\"{ \"hello\" : \"world\" }\"\"\"))\n\nappend!(collection, [ Mongoc.BSON(\"\"\"{ \"first\" : 1, \"delete\" : true }\"\"\"), Mongoc.BSON(\"\"\"{ \"second\" : 2, \"delete\" : true }\"\"\"), Mongoc.BSON(\"\"\"{ \"third\" : 3, \"delete\" : false }\"\"\") ])","category":"page"},{"location":"crud/#Select","page":"CRUD Operations","title":"Select","text":"","category":"section"},{"location":"crud/#API-2","page":"CRUD Operations","title":"API","text":"","category":"section"},{"location":"crud/","page":"CRUD Operations","title":"CRUD Operations","text":"find_one(collection::Collection, bson_filter::BSON=BSON(); options::Union{Nothing, BSON}=nothing) :: Union{Nothing, BSON}\n\nfind(collection::Collection, bson_filter::BSON=BSON(); options::Union{Nothing, BSON}=nothing) :: Cursor","category":"page"},{"location":"crud/#Examples-2","page":"CRUD Operations","title":"Examples","text":"","category":"section"},{"location":"crud/","page":"CRUD Operations","title":"CRUD Operations","text":"bson = Mongoc.find_one(collection, Mongoc.BSON(\"\"\"{ \"third\" : 3 }\"\"\"))\n\nfor doc in Mongoc.find(collection)\n    println(doc)\nend","category":"page"},{"location":"crud/#Update","page":"CRUD Operations","title":"Update","text":"","category":"section"},{"location":"crud/#API-3","page":"CRUD Operations","title":"API","text":"","category":"section"},{"location":"crud/","page":"CRUD Operations","title":"CRUD Operations","text":"Mongoc.update_one(collection::Collection, selector::BSON, update::BSON; options::Union{Nothing, BSON}=nothing)\n\nMongoc.update_many(collection::Collection, selector::BSON, update::BSON; options::Union{Nothing, BSON}=nothing)","category":"page"},{"location":"crud/#Examples-3","page":"CRUD Operations","title":"Examples","text":"","category":"section"},{"location":"crud/","page":"CRUD Operations","title":"CRUD Operations","text":"selector = Mongoc.BSON(\"\"\"{ \"delete\" : false }\"\"\")\nupdate = Mongoc.BSON(\"\"\"{ \"\\$set\" : { \"delete\" : true, \"new_field\" : 1 } }\"\"\")\nMongoc.update_one(collection, selector, update)\n\nselector = Mongoc.BSON(\"\"\"{ \"delete\" : true }\"\"\")\nupdate = Mongoc.BSON(\"\"\"{ \"\\$set\" : { \"delete\" : false } }\"\"\")\nMongoc.update_many(collection, selector, update)","category":"page"},{"location":"crud/#Delete","page":"CRUD Operations","title":"Delete","text":"","category":"section"},{"location":"crud/#API-4","page":"CRUD Operations","title":"API","text":"","category":"section"},{"location":"crud/","page":"CRUD Operations","title":"CRUD Operations","text":"Mongoc.delete_one(collection::Collection, selector::BSON; options::Union{Nothing, BSON}=nothing)\n\nMongoc.delete_many(collection::Collection, selector::BSON; options::Union{Nothing, BSON}=nothing)","category":"page"},{"location":"crud/#Examples-4","page":"CRUD Operations","title":"Examples","text":"","category":"section"},{"location":"crud/","page":"CRUD Operations","title":"CRUD Operations","text":"selector = Mongoc.BSON(\"_id\" => oid)\nMongoc.delete_one(collection, selector)\n\n# deletes all elements in a collection\nMongoc.delete_many(collection, Mongoc.BSON()) # equivalent to `empty!(collection)`","category":"page"},{"location":"transaction/#Transactions","page":"Transactions","title":"Transactions","text":"","category":"section"},{"location":"transaction/","page":"Transactions","title":"Transactions","text":"Support for transactions is available from MongoDB v4.0.","category":"page"},{"location":"transaction/#Setting-up-a-Replica-Set","page":"Transactions","title":"Setting up a Replica Set","text":"","category":"section"},{"location":"transaction/","page":"Transactions","title":"Transactions","text":"As described in the MongoDB Manual, \"multi-document transactions are available for replica sets only. Transactions for sharded clusters are scheduled for MongoDB 4.2\".","category":"page"},{"location":"transaction/","page":"Transactions","title":"Transactions","text":"Follow these steps to start a replica set. The following script will create a replica set with 3 nodes:","category":"page"},{"location":"transaction/","page":"Transactions","title":"Transactions","text":"mkdir db1\nmkdir db2\nmkdir db3\nmongod --dbpath ./db1 --port 27021 --replSet \"rs0\" --bind_ip 127.0.0.1\nmongod --dbpath ./db2 --port 27022 --replSet \"rs0\" --bind_ip 127.0.0.1\nmongod --dbpath ./db3 --port 27023 --replSet \"rs0\" --bind_ip 127.0.0.1\nmongo --port 27021 replica_set_initiate.js","category":"page"},{"location":"transaction/","page":"Transactions","title":"Transactions","text":"The contents of replica_set_initiate.js are:","category":"page"},{"location":"transaction/","page":"Transactions","title":"Transactions","text":"rs.initiate( {\n   _id : \"rs0\",\n   members: [\n      { _id: 0, host: \"127.0.0.1:27021\" },\n      { _id: 1, host: \"127.0.0.1:27022\" },\n      { _id: 2, host: \"127.0.0.1:27023\" }\n   ]\n})","category":"page"},{"location":"transaction/#Executing-Transactions","page":"Transactions","title":"Executing Transactions","text":"","category":"section"},{"location":"transaction/","page":"Transactions","title":"Transactions","text":"In MongoDB, transactions are bound to Sessions.","category":"page"},{"location":"transaction/","page":"Transactions","title":"Transactions","text":"In Mongoc.jl, use the function Mongoc.transaction with do-syntax to execute a transaction, and use the argument session to get database and collection references bound to the session that will execute the transaction.","category":"page"},{"location":"transaction/","page":"Transactions","title":"Transactions","text":"Just use the session object the same way you would use a Client.","category":"page"},{"location":"transaction/","page":"Transactions","title":"Transactions","text":"note: Note\nDatabase and Collection references that are not created from a session object are not bound to the transaction.","category":"page"},{"location":"transaction/#Example","page":"Transactions","title":"Example","text":"","category":"section"},{"location":"transaction/","page":"Transactions","title":"Transactions","text":"import Mongoc\n\n# connect to a Replica Set\nclient = Mongoc.Client(\"mongodb://127.0.0.1:27021,127.0.0.1:27022,127.0.0.1:27023/?replicaSet=rs0\")\n\n# this collection reference is not bounded to the transaction\ncollection_unbounded = client[\"my_database\"][\"my_collection\"]\n\n# insert a dummy document, just to make sure the collection exists\npush!(collection_unbounded, Mongoc.BSON(\"\"\"{ \"test\" : 1 }\"\"\"))\nempty!(collection_unbounded)\n\nMongoc.transaction(client) do session\n    database = session[\"my_database\"]\n    collection = database[\"my_collection\"]\n    new_item = Mongoc.BSON()\n    new_item[\"inserted\"] = true\n    push!(collection, new_item)\n    println(\"collection_bounded is empty? \", isempty(collection_unbounded))\n    println(\"collection is empty? \", isempty(collection))\nend\n\nprintln(collect(collection_unbounded))","category":"page"},{"location":"transaction/","page":"Transactions","title":"Transactions","text":"The script output is:","category":"page"},{"location":"transaction/","page":"Transactions","title":"Transactions","text":"collection_bounded is empty? true\ncollection is empty? false\nMongoc.BSON[BSON(\"{ \"_id\" : { \"$oid\" : \"5ba4251f3192e3298b62c5a3\" }, \"inserted\" : true }\")]","category":"page"},{"location":"authentication/#Authentication","page":"Authentication","title":"Authentication","text":"","category":"section"},{"location":"authentication/","page":"Authentication","title":"Authentication","text":"Refer to the Security section of the MongoDB Manual for an overview on how authentication works in MongoDB.","category":"page"},{"location":"authentication/#Basic-Authentication-(SCRAM)","page":"Authentication","title":"Basic Authentication (SCRAM)","text":"","category":"section"},{"location":"authentication/","page":"Authentication","title":"Authentication","text":"In this authentication mechanism, user and passwords are passed in the URI string for the Mongoc.Client.","category":"page"},{"location":"authentication/#Enable-Auth","page":"Authentication","title":"Enable Auth","text":"","category":"section"},{"location":"authentication/","page":"Authentication","title":"Authentication","text":"To use basic authentication mechanism, first enable authentication in the database, as described in the MongoDB manual.","category":"page"},{"location":"authentication/#.-Start-MongoDB-without-access-control","page":"Authentication","title":"1. Start MongoDB without access control","text":"","category":"section"},{"location":"authentication/","page":"Authentication","title":"Authentication","text":"$ mongod --dbpath ./db","category":"page"},{"location":"authentication/#.-Connect-to-the-database-and-create-an-admin-user.","page":"Authentication","title":"2. Connect to the database and create an admin user.","text":"","category":"section"},{"location":"authentication/","page":"Authentication","title":"Authentication","text":"From a Julia session, you can use Mongoc.add_user to add users to a MongoDB database.","category":"page"},{"location":"authentication/","page":"Authentication","title":"Authentication","text":"import Mongoc\nroles = Mongoc.BSON(\"\"\"[ { \"role\" : \"userAdminAnyDatabase\", \"db\" : \"admin\" }, \"readWriteAnyDatabase\" ]\"\"\")\nclient = Mongoc.Client()\nMongoc.add_user(client[\"admin\"], \"myUserAdmin\", \"abc123\", roles)\nMongoc.destroy!(client) # or exit julia session","category":"page"},{"location":"authentication/#.-Re-start-the-MongoDB-instance-with-access-control","page":"Authentication","title":"3. Re-start the MongoDB instance with access control","text":"","category":"section"},{"location":"authentication/","page":"Authentication","title":"Authentication","text":"Kill the previous process running mongod and then start server with auth option.","category":"page"},{"location":"authentication/","page":"Authentication","title":"Authentication","text":"$ mongod --auth --dbpath ./db","category":"page"},{"location":"authentication/#Connect-and-authenticate","page":"Authentication","title":"Connect and authenticate","text":"","category":"section"},{"location":"authentication/","page":"Authentication","title":"Authentication","text":"Pass the user and password in the URI, as described in http://mongoc.org/libmongoc/current/authentication.html.","category":"page"},{"location":"authentication/","page":"Authentication","title":"Authentication","text":"client = Mongoc.Client(\"mongodb://myUserAdmin:abc123@localhost/?authSource=admin\")","category":"page"},{"location":"authentication/","page":"Authentication","title":"Authentication","text":"From MongoDB 4.0, there's a new authentication mechanism SCRAM-SHA-256, which replaces the previous SCRAM-SHA-1 mechanism. The correct authentication mechanism is negotiated between the driver and the server.","category":"page"},{"location":"authentication/","page":"Authentication","title":"Authentication","text":"Alternatively, SCRAM-SHA-256 can be explicitly specified:","category":"page"},{"location":"authentication/","page":"Authentication","title":"Authentication","text":"client = Mongoc.Client(\"mongodb://myUserAdmin:abc123@localhost/?authMechanism=SCRAM-SHA-256&authSource=admin\")","category":"page"},{"location":"authentication/","page":"Authentication","title":"Authentication","text":"Refer to the MongoDB manual for adding new users and roles per database.","category":"page"},{"location":"connection_pool/#Connection-Pool","page":"Connection Pool","title":"Connection Pool","text":"","category":"section"},{"location":"connection_pool/","page":"Connection Pool","title":"Connection Pool","text":"A ClientPool is a thread-safe pool of connections to a MongoDB instance.","category":"page"},{"location":"connection_pool/","page":"Connection Pool","title":"Connection Pool","text":"From a ClientPool you can create regular Client connections to MongoDB.","category":"page"},{"location":"connection_pool/","page":"Connection Pool","title":"Connection Pool","text":"const REPLICA_SET_URL = \"mongodb://127.0.0.1:27021,127.0.0.1:27022,127.0.0.1:27023/?replicaSet=rs0\"\n\n# creates a ClientPool with a maximum of 4 connections.\npool = Mongoc.ClientPool(REPLICA_SET_URL, max_size=4)\n\n# create Clients from a pool\nclient1 = Mongoc.Client(pool)\nclient2 = Mongoc.Client(pool)\nclient3 = Mongoc.Client(pool)\nclient4 = Mongoc.Client(pool)","category":"page"},{"location":"connection_pool/","page":"Connection Pool","title":"Connection Pool","text":"When you reach the maximum number of clients, the next call to Mongoc.Client(pool) will block until a Client is released.","category":"page"},{"location":"connection_pool/","page":"Connection Pool","title":"Connection Pool","text":"Use try_pop=true option to throw an error instead of blocking the current thread:","category":"page"},{"location":"connection_pool/","page":"Connection Pool","title":"Connection Pool","text":"# will throw `AssertionError`\nclient5 = Mongoc.Client(pool, try_pop=true)","category":"page"},{"location":"#Mongoc.jl","page":"Home","title":"Mongoc.jl","text":"","category":"section"},{"location":"#Introduction","page":"Home","title":"Introduction","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Mongoc.jl is a MongoDB driver for the Julia Language.","category":"page"},{"location":"","page":"Home","title":"Home","text":"It is implemented as a thin wrapper around libmongoc, the official client library for C applications.","category":"page"},{"location":"","page":"Home","title":"Home","text":"Given that BSON is the document format for MongoDB, this package also implements a wrapper around libbson, which provides a way to create and manipulate BSON documents.","category":"page"},{"location":"#Requirements","page":"Home","title":"Requirements","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"MongoDB 3.0 or newer.\nJulia versions v1.5 or newer.\nLinux, macOS, or Windows.","category":"page"},{"location":"#Installation","page":"Home","title":"Installation","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"From a Julia session, run:","category":"page"},{"location":"","page":"Home","title":"Home","text":"julia> using Pkg\n\njulia> Pkg.add(\"Mongoc\")","category":"page"},{"location":"#Source-Code","page":"Home","title":"Source Code","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"The source code for this package is hosted at https://github.com/felipenoris/Mongoc.jl.","category":"page"},{"location":"#License","page":"Home","title":"License","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"The source code for the package Mongoc.jl is licensed under the MIT License.","category":"page"},{"location":"","page":"Home","title":"Home","text":"This repository distributes binary assets built from mongo-c-driver source code, which is licensed under Apache-2.0.","category":"page"},{"location":"#Getting-Help","page":"Home","title":"Getting Help","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"If you're having any trouble, have any questions about this package or want to ask for a new feature, just open a new issue.","category":"page"},{"location":"#Contributing","page":"Home","title":"Contributing","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Contributions are always welcome!","category":"page"},{"location":"","page":"Home","title":"Home","text":"To contribute, fork the project on GitHub and send a Pull Request.","category":"page"},{"location":"#References","page":"Home","title":"References","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"libbson documentation\nlibmongoc documentation","category":"page"},{"location":"tutorial/#Tutorial","page":"Tutorial","title":"Tutorial","text":"","category":"section"},{"location":"tutorial/","page":"Tutorial","title":"Tutorial","text":"This tutorial illustrates common use cases for accessing a MongoDB database with Mongoc.jl package.","category":"page"},{"location":"tutorial/#Setup","page":"Tutorial","title":"Setup","text":"","category":"section"},{"location":"tutorial/","page":"Tutorial","title":"Tutorial","text":"First, make sure you have Mongoc.jl package installed.","category":"page"},{"location":"tutorial/","page":"Tutorial","title":"Tutorial","text":"julia> using Pkg\n\njulia> Pkg.add(\"Mongoc\")","category":"page"},{"location":"tutorial/","page":"Tutorial","title":"Tutorial","text":"The following tutorial assumes that a MongoDB instance is running on the default host and port: localhost:27017.","category":"page"},{"location":"tutorial/","page":"Tutorial","title":"Tutorial","text":"To start a new server instance on the default location use the following command on your shell.","category":"page"},{"location":"tutorial/","page":"Tutorial","title":"Tutorial","text":"$ mkdir db\n\n$ mongod --dbpath ./db","category":"page"},{"location":"tutorial/#Connecting-to-MongoDB","page":"Tutorial","title":"Connecting to MongoDB","text":"","category":"section"},{"location":"tutorial/","page":"Tutorial","title":"Tutorial","text":"Connect to a MongoDB instance using a Mongoc.Client. Use the MongoDB URI format to set the server location.","category":"page"},{"location":"tutorial/","page":"Tutorial","title":"Tutorial","text":"julia> import Mongoc\n\njulia> client = Mongoc.Client(\"mongodb://localhost:27017\")\nClient(URI(\"mongodb://localhost:27017\"))","category":"page"},{"location":"tutorial/","page":"Tutorial","title":"Tutorial","text":"As a shorthand, you can also use:","category":"page"},{"location":"tutorial/","page":"Tutorial","title":"Tutorial","text":"julia> client = Mongoc.Client(\"localhost\", 27017)","category":"page"},{"location":"tutorial/","page":"Tutorial","title":"Tutorial","text":"To connect to the server at the default location localhost:27017 you can use the Mongoc.Client constructor with no arguments.","category":"page"},{"location":"tutorial/","page":"Tutorial","title":"Tutorial","text":"julia> client = Mongoc.Client()","category":"page"},{"location":"tutorial/","page":"Tutorial","title":"Tutorial","text":"One thing to keep in mind about MongoDB is that operations are usually lazy. So you don't actually connect to the database until you need to issue a command or query.","category":"page"},{"location":"tutorial/","page":"Tutorial","title":"Tutorial","text":"If you need to check the connection status before sending commands, use Mongoc.ping(client) to ping the server.","category":"page"},{"location":"tutorial/","page":"Tutorial","title":"Tutorial","text":"julia> Mongoc.ping(client)\nBSON(\"{ \"ok\" : 1.0 }\")","category":"page"},{"location":"tutorial/#Getting-a-Database","page":"Tutorial","title":"Getting a Database","text":"","category":"section"},{"location":"tutorial/","page":"Tutorial","title":"Tutorial","text":"A MongoDB instance consists on a set of independent databases. You get a Database reference using the following command.","category":"page"},{"location":"tutorial/","page":"Tutorial","title":"Tutorial","text":"julia> database = client[\"my-database\"]\nDatabase(Client(URI(\"mongodb://localhost:27017\")), \"my-database\")","category":"page"},{"location":"tutorial/","page":"Tutorial","title":"Tutorial","text":"If \"my-database\" does not exist on your MongoDB instance, it will be created in the first time you insert a document in it.","category":"page"},{"location":"tutorial/#Getting-a-Collection","page":"Tutorial","title":"Getting a Collection","text":"","category":"section"},{"location":"tutorial/","page":"Tutorial","title":"Tutorial","text":"A Collection is a set of documents in a MongoDB database. You get a collection reference using the following command.","category":"page"},{"location":"tutorial/","page":"Tutorial","title":"Tutorial","text":"julia> collection = database[\"my-collection\"]\nCollection(Database(Client(URI(\"mongodb://localhost:27017\")), \"my-database\"), \"my-collection\")","category":"page"},{"location":"tutorial/","page":"Tutorial","title":"Tutorial","text":"If it does not exist inside your database, the Collection is created in the first time you insert a document in it.","category":"page"},{"location":"tutorial/#BSON-Documents","page":"Tutorial","title":"BSON Documents","text":"","category":"section"},{"location":"tutorial/","page":"Tutorial","title":"Tutorial","text":"BSON is the document format for MongoDB.","category":"page"},{"location":"tutorial/","page":"Tutorial","title":"Tutorial","text":"To create a BSON document instance in Mongoc.jl just use Dictionary syntax, using Strings as keys.","category":"page"},{"location":"tutorial/","page":"Tutorial","title":"Tutorial","text":"julia> document = Mongoc.BSON()\n\njulia> document[\"name\"] = \"Felipe\"\n\njulia> document[\"age\"] = 35\n\njulia> document[\"preferences\"] = [ \"Music\", \"Computer\", \"Photography\" ]\n\njulia> document[\"null_value\"] = nothing # maps to BSON null value\n\njulia> using Dates; document[\"details\"] = Dict(\"birth date\" => DateTime(1983, 4, 16), \"location\" => \"Rio de Janeiro\")\n\njulia> using UUIDs; document[\"id\"] = uuid4()","category":"page"},{"location":"tutorial/","page":"Tutorial","title":"Tutorial","text":"As another example:","category":"page"},{"location":"tutorial/","page":"Tutorial","title":"Tutorial","text":"julia> document = Mongoc.BSON(\"a\" => 1, \"b\" => \"field_b\", \"c\" => [1, 2, 3])\nBSON(\"{ \"a\" : 1, \"b\" : \"field_b\", \"c\" : [ 1, 2, 3 ] }\")","category":"page"},{"location":"tutorial/","page":"Tutorial","title":"Tutorial","text":"You can also create a BSON document from a JSON string.","category":"page"},{"location":"tutorial/","page":"Tutorial","title":"Tutorial","text":"julia> document = Mongoc.BSON(\"\"\"{ \"hey\" : \"you\" }\"\"\")","category":"page"},{"location":"tutorial/","page":"Tutorial","title":"Tutorial","text":"And also from a Dictionary.","category":"page"},{"location":"tutorial/","page":"Tutorial","title":"Tutorial","text":"julia> dict = Dict(\"hey\" => \"you\")\nDict{String,String} with 1 entry:\n  \"hey\" => \"you\"\n\njulia> document = Mongoc.BSON(dict)\nBSON(\"{ \"hey\" : \"you\" }\")","category":"page"},{"location":"tutorial/","page":"Tutorial","title":"Tutorial","text":"Reading data from a BSON is like reading from a Dict.","category":"page"},{"location":"tutorial/","page":"Tutorial","title":"Tutorial","text":"julia> document = Mongoc.BSON(\"a\" => 1, \"b\" => \"field_b\", \"c\" => [1, 2, 3])\nBSON(\"{ \"a\" : 1, \"b\" : \"field_b\", \"c\" : [ 1, 2, 3 ] }\")\n\njulia> document[\"a\"]\n1\n\njulia> document[\"b\"]\n\"field_b\"","category":"page"},{"location":"tutorial/","page":"Tutorial","title":"Tutorial","text":"Like a Dict, you can iterate thru BSON's (key, value) pairs, like so:","category":"page"},{"location":"tutorial/","page":"Tutorial","title":"Tutorial","text":"julia> for (k, v) in document\n           println(\"[$k] = $v\")\n       end\n[a] = 1\n[b] = field_b\n[c] = Any[1, 2, 3]","category":"page"},{"location":"tutorial/","page":"Tutorial","title":"Tutorial","text":"To convert a BSON to a JSON string, use:","category":"page"},{"location":"tutorial/","page":"Tutorial","title":"Tutorial","text":"julia> Mongoc.as_json(document)\n\"{ \\\"name\\\" : \\\"Felipe\\\", \\\"age\\\" : 35, \\\"preferences\\\" : [ \\\"Music\\\", \\\"Computer\\\", \\\"Photography\\\" ], \\\"null_value\\\" : null, \\\"details\\\" : { \\\"location\\\" : \\\"Rio de Janeiro\\\", \\\"birth date\\\" : { \\\"\\$date\\\" : \\\"1983-04-16T00:00:00Z\\\" } } }\"","category":"page"},{"location":"tutorial/","page":"Tutorial","title":"Tutorial","text":"To convert a BSON document to a Dictionary, use Mongoc.as_dict.","category":"page"},{"location":"tutorial/","page":"Tutorial","title":"Tutorial","text":"julia> Mongoc.as_dict(document)\nDict{Any,Any} with 1 entry:\n  \"hey\" => \"you\"","category":"page"},{"location":"tutorial/#Read/Write-BSON-documents-from/to-IO-Stream","page":"Tutorial","title":"Read/Write BSON documents from/to IO Stream","text":"","category":"section"},{"location":"tutorial/","page":"Tutorial","title":"Tutorial","text":"You can read and write BSON documents in binary format to IO streams.","category":"page"},{"location":"tutorial/#High-level-API","page":"Tutorial","title":"High-level API","text":"","category":"section"},{"location":"tutorial/","page":"Tutorial","title":"Tutorial","text":"BSON documents can be serialized using Julia's Serialization stdlib. This means that BSON documents can also be shared among Julia workers using Julia's Distributed stdlib.","category":"page"},{"location":"tutorial/","page":"Tutorial","title":"Tutorial","text":"\nusing Test, Mongoc\n\n@testset \"read/write single BSON\" begin\n    doc = Mongoc.BSON(\"a\" => 1)\n    io = IOBuffer()\n    write(io, doc)\n    seekstart(io)\n    doc2 = read(io, Mongoc.BSON)\n    @test doc2[\"a\"] == 1\nend\n\naddprocs(1)\n@everywhere using Mongoc\n\n@testset \"Serialize BSON\" begin\n    f = @spawn Mongoc.BSON(\"a\" => 1)\n    bson = fetch(f)\n    @test bson[\"a\"] == 1\nend","category":"page"},{"location":"tutorial/#Low-level-API","page":"Tutorial","title":"Low-level API","text":"","category":"section"},{"location":"tutorial/","page":"Tutorial","title":"Tutorial","text":"The following example shows how to:","category":"page"},{"location":"tutorial/","page":"Tutorial","title":"Tutorial","text":"Create a vector of BSON documents.\nSave the vector to a file.\nRead back the vector of BSON documents from a file.","category":"page"},{"location":"tutorial/","page":"Tutorial","title":"Tutorial","text":"using Test, Mongoc\n\nfilepath = \"data.bson\"\nlist = Vector{Mongoc.BSON}()\n\nlet\n    src = Mongoc.BSON()\n    src[\"id\"] = 1\n    src[\"name\"] = \"1st\"\n    push!(list, src)\nend\n\nlet\n    src = Mongoc.BSON()\n    src[\"id\"] = 2\n    src[\"name\"] = \"2nd\"\n    push!(list, src)\nend\n\nopen(filepath, \"w\") do io\n    Mongoc.write_bson(io, list)\nend\n\nlist_from_file = Mongoc.read_bson(filepath)\n@test length(list_from_file) == 2\n\nlet\n    fst_bson = list_from_file[1]\n    @test fst_bson[\"id\"] == 1\n    @test fst_bson[\"name\"] == \"1st\"\nend\n\nlet\n    sec_bson = list_from_file[2]\n    @test sec_bson[\"id\"] == 2\n    @test sec_bson[\"name\"] == \"2nd\"\nend","category":"page"},{"location":"tutorial/#Read-BSON-Documents-from-a-JSON-File","page":"Tutorial","title":"Read BSON Documents from a JSON File","text":"","category":"section"},{"location":"tutorial/","page":"Tutorial","title":"Tutorial","text":"Given a JSON file docs.json with the following content:","category":"page"},{"location":"tutorial/","page":"Tutorial","title":"Tutorial","text":"{ \"num\" : 1, \"str\" : \"two\" }\n{ \"num\" : 2, \"str\" : \"three\" }","category":"page"},{"location":"tutorial/","page":"Tutorial","title":"Tutorial","text":"This file can be read using a Mongoc.BSONJSONReader. A high-level function Mongoc.read_bson_from_json is also available.","category":"page"},{"location":"tutorial/","page":"Tutorial","title":"Tutorial","text":"Notice how strange the json format is: it is a sequence of JSON documents without separator. Adding a separator (,) between JSON documents will duplicate the BSON fields. Also, if you enclose the whole file with a vector of JSONs, a single BSON will be returned with a vector of elements.","category":"page"},{"location":"tutorial/#Examples","page":"Tutorial","title":"Examples","text":"","category":"section"},{"location":"tutorial/","page":"Tutorial","title":"Tutorial","text":"vec_of_bsons = Mongoc.read_bson_from_json(\"docs.json\")","category":"page"},{"location":"tutorial/","page":"Tutorial","title":"Tutorial","text":"reader = Mongoc.BSONJSONReader(\"docs.json\")\nfor bson in reader\n    println(bson)\nend","category":"page"},{"location":"tutorial/#Inserting-Documents","page":"Tutorial","title":"Inserting Documents","text":"","category":"section"},{"location":"tutorial/","page":"Tutorial","title":"Tutorial","text":"To insert a single document into a collection, just Base.push! a BSON document to it. The result of this operation wraps the server reply and the inserted oid.","category":"page"},{"location":"tutorial/","page":"Tutorial","title":"Tutorial","text":"julia> document = Mongoc.BSON(\"\"\"{ \"hey\" : \"you\" }\"\"\")\nBSON(\"{ \"hey\" : \"you\" }\")\n\njulia> result = push!(collection, document)\nMongoc.InsertOneResult{Mongoc.BSONObjectId}(BSON(\"{ \"insertedCount\" : 1 }\"), BSONObjectId(\"5c9fdb5d11c3dd04a83ba6c2\"))\n\njulia> result.inserted_oid\nBSONObjectId(\"5c9fdb5d11c3dd04a83ba6c2\")","category":"page"},{"location":"tutorial/","page":"Tutorial","title":"Tutorial","text":"Use Base.append! to insert a vector of documents to a collection. The result of this operation also wraps the server reply and the inserted oids.","category":"page"},{"location":"tutorial/","page":"Tutorial","title":"Tutorial","text":"julia> doc1 = Mongoc.BSON(\"\"\"{ \"hey\" : \"you\", \"out\" : \"there\" }\"\"\")\nBSON(\"{ \"hey\" : \"you\", \"out\" : \"there\" }\")\n\njulia> doc2 = Mongoc.BSON(\"\"\"{ \"hey\" : \"others\", \"in the\" : \"cold\" }\"\"\")\nBSON(\"{ \"hey\" : \"others\", \"in the\" : \"cold\" }\")\n\njulia> vector = [ doc1, doc2 ]\n2-element Array{Mongoc.BSON,1}:\n BSON(\"{ \"hey\" : \"you\", \"out\" : \"there\" }\")\n BSON(\"{ \"hey\" : \"others\", \"in the\" : \"cold\" }\")\n\njulia> append!(collection, vector)\nMongoc.BulkOperationResult{Union{Nothing, BSONObjectId}}(BSON(\"{ \"nInserted\" : 2, \"nMatched\" : 0, \"nModified\" : 0, \"nRemoved\" : 0, \"nUpserted\" : 0, \"writeErrors\" : [  ] }\"), 0x00000001, Union{Nothing, BSONObjectId}[BSONObjectId(\"5c9fdbab11c3dd04a83ba6c3\"), BSONObjectId(\"5c9fdbab11c3dd04a83ba6c4\")])","category":"page"},{"location":"tutorial/#Querying-Documents","page":"Tutorial","title":"Querying Documents","text":"","category":"section"},{"location":"tutorial/","page":"Tutorial","title":"Tutorial","text":"To query a single document, use Mongoc.find_one. Pass a BSON argument as a query filter.","category":"page"},{"location":"tutorial/","page":"Tutorial","title":"Tutorial","text":"julia> document = Mongoc.find_one(collection, Mongoc.BSON(\"\"\"{ \"hey\" : \"you\" }\"\"\"))\nBSON(\"{ \"_id\" : { \"$oid\" : \"5b9ef9cc11c3dd1da14675c3\" }, \"hey\" : \"you\" }\")","category":"page"},{"location":"tutorial/","page":"Tutorial","title":"Tutorial","text":"To iterate all documents from a collection, just use a for loop on a collection.","category":"page"},{"location":"tutorial/","page":"Tutorial","title":"Tutorial","text":"julia> for document in collection\n        println(document)\n       end\nBSON(\"{ \"_id\" : { \"$oid\" : \"5b9f02fb11c3dd1f4f3e26e5\" }, \"hey\" : \"you\", \"out\" : \"there\" }\")\nBSON(\"{ \"_id\" : { \"$oid\" : \"5b9f02fb11c3dd1f4f3e26e6\" }, \"hey\" : \"others\", \"in the\" : \"cold\" }\")","category":"page"},{"location":"tutorial/","page":"Tutorial","title":"Tutorial","text":"To query multiple documents, use Mongoc.find. Pass a BSON query argument as a query filter. It returns a iterator of BSON documents that can be read using a for loop.","category":"page"},{"location":"tutorial/","page":"Tutorial","title":"Tutorial","text":"julia> for document in Mongoc.find(collection, Mongoc.BSON(\"\"\"{ \"in the\" : \"cold\" }\"\"\"))\n           println(document)\n       end\nBSON(\"{ \"_id\" : { \"$oid\" : \"5b9f02fb11c3dd1f4f3e26e6\" }, \"hey\" : \"others\", \"in the\" : \"cold\" }\")","category":"page"},{"location":"tutorial/","page":"Tutorial","title":"Tutorial","text":"Use Base.collect to convert the result of Mongoc.find into a vector of BSON documents.","category":"page"},{"location":"tutorial/","page":"Tutorial","title":"Tutorial","text":"Also, applying Base.collect to a Collection gathers all documents in the collection.","category":"page"},{"location":"tutorial/","page":"Tutorial","title":"Tutorial","text":"julia> collect(collection)\n2-element Array{Mongoc.BSON,1}:\nBSON(\"{ \"_id\" : { \"$oid\" : \"5b9f02fb11c3dd1f4f3e26e5\" }, \"hey\" : \"you\", \"out\" : \"there\" }\")\nBSON(\"{ \"_id\" : { \"$oid\" : \"5b9f02fb11c3dd1f4f3e26e6\" }, \"hey\" : \"others\", \"in the\" : \"cold\" }\")","category":"page"},{"location":"tutorial/#Project-fields-to-Return-from-Query","page":"Tutorial","title":"Project fields to Return from Query","text":"","category":"section"},{"location":"tutorial/","page":"Tutorial","title":"Tutorial","text":"To select which fields you want a query to return, use a projection command in the options argument of Mongoc.find or Mongoc.find_one.","category":"page"},{"location":"tutorial/","page":"Tutorial","title":"Tutorial","text":"As an example:","category":"page"},{"location":"tutorial/","page":"Tutorial","title":"Tutorial","text":"function find_contract_codes(collection, criteria::Dict=Dict()) :: Vector{String}\n    result = Vector{String}()\n\n    let\n        bson_filter = Mongoc.BSON(criteria)\n        bson_options = Mongoc.BSON(\"\"\"{ \"projection\" : { \"_id\" : true }, \"sort\" : { \"_id\" : 1 } }\"\"\")\n        for bson_document in Mongoc.find(collection, bson_filter, options=bson_options)\n            push!(result, bson_document[\"_id\"])\n        end\n    end\n\n    return result\nend","category":"page"},{"location":"tutorial/","page":"Tutorial","title":"Tutorial","text":"Check the libmongoc documentation for options field for details.","category":"page"},{"location":"tutorial/#Counting-Documents","page":"Tutorial","title":"Counting Documents","text":"","category":"section"},{"location":"tutorial/","page":"Tutorial","title":"Tutorial","text":"Use Base.length function to count the number of documents in a collection. Pass a BSON argument as a query filter.","category":"page"},{"location":"tutorial/","page":"Tutorial","title":"Tutorial","text":"julia> length(collection)\n2\n\njulia> length(collection, Mongoc.BSON(\"\"\"{ \"in the\" : \"cold\" }\"\"\"))\n1","category":"page"},{"location":"tutorial/#Aggregation-and-Map-Reduce","page":"Tutorial","title":"Aggregation and Map-Reduce","text":"","category":"section"},{"location":"tutorial/","page":"Tutorial","title":"Tutorial","text":"Use Mongoc.aggregate to execute an aggregation command.","category":"page"},{"location":"tutorial/","page":"Tutorial","title":"Tutorial","text":"The following reproduces the example from the MongoDB Tutorial.","category":"page"},{"location":"tutorial/","page":"Tutorial","title":"Tutorial","text":"docs = [\n    Mongoc.BSON(\"\"\"{ \"cust_id\" : \"A123\", \"amount\" : 500, \"status\" : \"A\" }\"\"\"),\n    Mongoc.BSON(\"\"\"{ \"cust_id\" : \"A123\", \"amount\" : 250, \"status\" : \"A\" }\"\"\"),\n    Mongoc.BSON(\"\"\"{ \"cust_id\" : \"B212\", \"amount\" : 200, \"status\" : \"A\" }\"\"\"),\n    Mongoc.BSON(\"\"\"{ \"cust_id\" : \"A123\", \"amount\" : 300, \"status\" : \"D\" }\"\"\")\n]\n\ncollection = client[\"my-database\"][\"aggregation-collection\"]\nappend!(collection, docs)\n\n# Sets the pipeline command\nbson_pipeline = Mongoc.BSON(\"\"\"\n    [\n        { \"\\$match\" : { \"status\" : \"A\" } },\n        { \"\\$group\" : { \"_id\" : \"\\$cust_id\", \"total\" : { \"\\$sum\" : \"\\$amount\" } } }\n    ]\n\"\"\")\n\nfor doc in Mongoc.aggregate(collection, bson_pipeline)\n  println(doc)\nend","category":"page"},{"location":"tutorial/","page":"Tutorial","title":"Tutorial","text":"The result of the script above is:","category":"page"},{"location":"tutorial/","page":"Tutorial","title":"Tutorial","text":"BSON(\"{ \"_id\" : \"B212\", \"total\" : 200 }\")\nBSON(\"{ \"_id\" : \"A123\", \"total\" : 750 }\")","category":"page"},{"location":"tutorial/","page":"Tutorial","title":"Tutorial","text":"A Map-Reduce operation can be executed with Mongoc.command_simple or Mongoc.read_command.","category":"page"},{"location":"tutorial/","page":"Tutorial","title":"Tutorial","text":"input_collection_name = \"aggregation-collection\"\noutput_collection_name = \"order_totals\"\nquery = Mongoc.BSON(\"\"\"{ \"status\" : \"A\" }\"\"\")\n\n# use `Mongoc.BSONCode` to represent JavaScript elements in BSON\nmapper = Mongoc.BSONCode(\"\"\" function() { emit( this.cust_id, this.amount ); } \"\"\")\nreducer = Mongoc.BSONCode(\"\"\" function(key, values) { return Array.sum( values ) } \"\"\")\n\nmap_reduce_command = Mongoc.BSON()\nmap_reduce_command[\"mapReduce\"] = input_collection_name\nmap_reduce_command[\"map\"] = mapper\nmap_reduce_command[\"reduce\"] = reducer\nmap_reduce_command[\"out\"] = output_collection_name\nmap_reduce_command[\"query\"] = query\n\nresult = Mongoc.read_command(database, map_reduce_command)\nprintln(result)\n\nfor doc in Mongoc.find(database[\"order_totals\"])\n   println(doc)\nend","category":"page"},{"location":"tutorial/","page":"Tutorial","title":"Tutorial","text":"The result of the script above is:","category":"page"},{"location":"tutorial/","page":"Tutorial","title":"Tutorial","text":"BSON(\"{ \"result\" : \"order_totals\", \"timeMillis\" : 135, \"counts\" : { \"input\" : 3, \"emit\" : 3, \"reduce\" : 1, \"output\" : 2 }, \"ok\" : 1.0 }\")\nBSON(\"{ \"_id\" : \"A123\", \"value\" : 750.0 }\")\nBSON(\"{ \"_id\" : \"B212\", \"value\" : 200.0 }\")","category":"page"},{"location":"tutorial/#\"distinct\"-command","page":"Tutorial","title":"\"distinct\" command","text":"","category":"section"},{"location":"tutorial/","page":"Tutorial","title":"Tutorial","text":"This example demonstrates the distinct command, based on libmongoc docs.","category":"page"},{"location":"tutorial/","page":"Tutorial","title":"Tutorial","text":"import Mongoc\nclient = Mongoc.Client()\n\ndocs = [\n    Mongoc.BSON(\"\"\"{ \"cust_id\" : \"A123\", \"amount\" : 500, \"status\" : \"A\" }\"\"\"),\n    Mongoc.BSON(\"\"\"{ \"cust_id\" : \"A123\", \"amount\" : 250, \"status\" : \"A\" }\"\"\"),\n    Mongoc.BSON(\"\"\"{ \"cust_id\" : \"B212\", \"amount\" : 200, \"status\" : \"A\" }\"\"\"),\n    Mongoc.BSON(\"\"\"{ \"cust_id\" : \"A123\", \"amount\" : 300, \"status\" : \"D\" }\"\"\")\n]\n\ncollection = client[\"my-database\"][\"my-collection\"]\nappend!(collection, docs)\n\ndistinct_cmd = Mongoc.BSON()\ndistinct_cmd[\"distinct\"] = \"my-collection\"\ndistinct_cmd[\"key\"] = \"status\"\n\nresult = Mongoc.command_simple(client[\"my-database\"], distinct_cmd)","category":"page"},{"location":"tutorial/","page":"Tutorial","title":"Tutorial","text":"Which yields:","category":"page"},{"location":"tutorial/","page":"Tutorial","title":"Tutorial","text":"BSON(\"{ \"values\" : [ \"A\", \"D\" ], \"ok\" : 1.0 }\")","category":"page"},{"location":"tutorial/#Find-and-Modify","page":"Tutorial","title":"Find and Modify","text":"","category":"section"},{"location":"tutorial/","page":"Tutorial","title":"Tutorial","text":"Use Mongoc.find_and_modify to query and update documents in a single pass.","category":"page"},{"location":"tutorial/","page":"Tutorial","title":"Tutorial","text":"#\n# populate a new collection\n#\n\ncollection = client[\"database_name\"][\"find_and_modify\"]\n\ndocs = [\n    Mongoc.BSON(\"\"\"{ \"cust_id\" : \"A123\", \"amount\" : 500, \"status\" : \"A\" }\"\"\"),\n    Mongoc.BSON(\"\"\"{ \"cust_id\" : \"A123\", \"amount\" : 250, \"status\" : \"A\" }\"\"\"),\n    Mongoc.BSON(\"\"\"{ \"cust_id\" : \"B212\", \"amount\" : 200, \"status\" : \"A\" }\"\"\"),\n    Mongoc.BSON(\"\"\"{ \"cust_id\" : \"A123\", \"amount\" : 300, \"status\" : \"D\" }\"\"\")\n]\n\nappend!(collection, docs)\n\n#\n# updates the item with amount 5000 with status \"N\"\n#\nquery = Mongoc.BSON(\"amount\" => 500)\n\nreply = Mongoc.find_and_modify(\n    collection,\n    query,\n    update = Mongoc.BSON(\"\"\"{ \"\\$set\" : { \"status\" : \"N\" } }\"\"\"),\n    flags = Mongoc.FIND_AND_MODIFY_FLAG_RETURN_NEW # will return the new version of the document\n)\n\nmodified_doc = reply[\"value\"]\n@test modified_doc[\"status\"] == \"N\"\n\n#\n# UPSERT example: if the queried item is not found, it is created\n#\n\nquery = Mongoc.BSON(\"\"\"{ \"cust_id\" : \"C555\", \"amount\" : 10, \"status\" : \"X\" }\"\"\")\n\nreply = Mongoc.find_and_modify(\n    collection,\n    query,\n    update = Mongoc.BSON(\"\"\"{ \"\\$set\" : { \"status\" : \"S\" } }\"\"\"),\n    flags = Mongoc.FIND_AND_MODIFY_FLAG_UPSERT | Mongoc.FIND_AND_MODIFY_FLAG_RETURN_NEW\n)\n\nnew_document = reply[\"value\"]\n@test new_document[\"cust_id\"] == \"C555\"\n@test new_document[\"amount\"] == 10\n@test new_document[\"status\"] == \"S\"\n\n#\n# Update sorted with selected fields\n#\nquery = Mongoc.BSON(\"\"\"{ \"amount\" : { \"\\$lt\" : 300 } }\"\"\")\nupdate = Mongoc.BSON(\"\"\"{ \"\\$set\" : { \"status\" : \"Z\" } }\"\"\")\nfields = Mongoc.BSON(\"\"\"{ \"amount\" : 1, \"status\" : 1 }\"\"\")\nsort = Mongoc.BSON(\"\"\"{ \"amount\" : 1 }\"\"\")\n\nreply = Mongoc.find_and_modify(\n    collection,\n    query,\n    update=update,\n    sort=sort,\n    fields=fields,\n    flags=Mongoc.FIND_AND_MODIFY_FLAG_RETURN_NEW)\n\nnew_document = reply[\"value\"]\n@test new_document[\"amount\"] == 10\n@test new_document[\"status\"] == \"Z\"\n@test !haskey(new_document, \"cust_id\")","category":"page"},{"location":"tutorial/#Create-Index","page":"Tutorial","title":"Create Index","text":"","category":"section"},{"location":"tutorial/","page":"Tutorial","title":"Tutorial","text":"Use Mongoc.write_command to issue a createIndexes command to the database.","category":"page"},{"location":"tutorial/","page":"Tutorial","title":"Tutorial","text":"database = client[DB_NAME]\ncollection_name = \"index_collection\"\ncollection = database[collection_name]\n\nlet\n    items = [\n            Mongoc.BSON(\"_id\" => 1, \"group\" => \"g1\"),\n            Mongoc.BSON(\"_id\" => 2, \"group\" => \"g1\"),\n            Mongoc.BSON(\"_id\" => 3, \"group\" => \"g2\")\n        ]\n\n    append!(collection, items)\nend\n\ncreate_indexes_cmd = Mongoc.BSON(\n        \"createIndexes\" => collection_name,\n        \"indexes\" => [ Mongoc.BSON(\"key\" => Mongoc.BSON(\"group\" => 1), \"name\" => \"group_index\") ]\n    )\nreply = Mongoc.write_command(database, create_indexes_cmd)\n@assert reply[\"ok\"] == 1","category":"page"},{"location":"tutorial/","page":"Tutorial","title":"Tutorial","text":"See also: http://mongoc.org/libmongoc/current/create-indexes.html.","category":"page"}]
}
